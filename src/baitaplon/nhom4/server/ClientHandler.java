package baitaplon.nhom4.server;

import baitaplon.nhom4.client.model.MessageModel;
import baitaplon.nhom4.server.model.User;

import java.io.*;
import java.net.Socket;
import java.sql.Connection;

/**
 * ClientHandler ch·ªãu tr√°ch nhi·ªám giao ti·∫øp v·ªõi 1 client.
 * Ghi ch√∫: sendMessage gi·ªù b·ªÅn h∆°n ‚Äî n√≥ kh√¥ng n√©m IOException ra ngo√†i n·ªØa,
 * m√† s·∫Ω d·ªçn d·∫πp connection v√† xo√° handler kh·ªèi server khi socket b·ªã ƒë√≥ng.
 */
public class ClientHandler implements Runnable {

    private final Socket socket;
    private final MainServer server;
    private final Connection conn;
    private ObjectInputStream in;
    private ObjectOutputStream out;
    private volatile boolean isRunning = true;
    private MessageProcessor messageProcessor;
    private User user;

    public ClientHandler(Socket socket, MainServer server, Connection conn) {
        this.socket = socket;
        this.server = server;
        this.conn = conn;
        this.messageProcessor = new MessageProcessor(this, conn);
    }

    @Override
    public void run() {
        try {
            out = new ObjectOutputStream(socket.getOutputStream());
            in = new ObjectInputStream(socket.getInputStream());
            System.out.println("üü¢ Client connected: " + socket.getInetAddress());

            while (isRunning) {
                Object obj;
                try {
                    obj = in.readObject();
                } catch (EOFException eof) {
                    // client ch·ªß ƒë·ªông ƒë√≥ng connection
                    System.out.println("üî¥ Client ng·∫Øt k·∫øt n·ªëi (EOF): " + socket.getInetAddress());
                    break;
                } catch (IOException ioe) {
                    System.out.println("üî¥ L·ªói ƒë·ªçc t·ª´ client: " + ioe.getMessage());
                    break;
                }

                if (obj instanceof MessageModel) {
                    MessageModel message = (MessageModel) obj;
                    if (message != null) {
                        try {
                            messageProcessor.process(message);
                        } catch (Exception e) {
                            // B·∫£o to√†n v√≤ng l·∫∑p ‚Äî n·∫øu x·ª≠ l√Ω message l·ªói th√¨ log v√† ti·∫øp t·ª•c
                            e.printStackTrace();
                        }
                    }
                } else {
                    // N·∫øu ƒë·ªçc ƒë∆∞·ª£c object kh√¥ng ph·∫£i MessageModel, c√≥ th·ªÉ b·ªè qua ho·∫∑c log
                    System.out.println("‚ö†Ô∏è Nh·∫≠n object kh√¥ng ph·∫£i MessageModel: " + (obj != null ? obj.getClass() : "null"));
                }
            }

        } catch (Exception e) {
            System.out.println("üî¥ L·ªói ClientHandler: " + e.getMessage());
            // e.printStackTrace();
        } finally {
            closeConnection();
        }
    }

    /**
     * G·ª≠i Message ƒë·∫øn client. N·∫øu g·ª≠i th·∫•t b·∫°i (socket ƒë√£ ƒë√≥ng, connection reset, ...)
     * th√¨ d·ªçn d·∫πp connection v√† xo√° handler kh·ªèi server. Ph∆∞∆°ng th·ª©c n√†y KH√îNG n√©m exception.
     */
    public synchronized void sendMessage(MessageModel message) {
        if (out == null || socket == null || socket.isClosed()) {
            // Kh√¥ng c√≤n k·∫øt n·ªëi, d·ªçn d·∫πp
            closeConnection();
            return;
        }
        try {
            out.writeObject(message);
            out.flush();
        } catch (IOException e) {
            System.out.println("üî¥ G·ª≠i message th·∫•t b·∫°i t·ªõi client " + (socket != null ? socket.getInetAddress() : "") + ": " + e.getMessage());
            // D·ªçn d·∫πp v√† lo·∫°i b·ªè handler kh·ªèi server
            closeConnection();
        }
    }

    /**
     * ƒê√≥ng k·∫øt n·ªëi an to√†n, ƒë√≥ng streams, socket, v√† th√¥ng b√°o cho MainServer lo·∫°i b·ªè handler.
     */
    public synchronized void closeConnection() {
        if (!isRunning) {
            // ƒë√£ d·ªçn d·∫πp r·ªìi
            return;
        }
        isRunning = false;
        try {
            if (in != null) {
                try { in.close(); } catch (IOException ignored) {}
            }
            if (out != null) {
                try { out.close(); } catch (IOException ignored) {}
            }
            if (socket != null && !socket.isClosed()) {
                try { socket.close(); } catch (IOException ignored) {}
            }
        } finally {
            // Th√¥ng b√°o server lo·∫°i b·ªè handler kh·ªèi danh s√°ch
            try {
                server.removeClientHandler(this);
            } catch (Exception ignored) {}
            System.out.println("üî¥ ƒê√£ ƒë√≥ng connection v√† lo·∫°i b·ªè ClientHandler cho " + (user != null ? user.getUsername() : socket.getInetAddress()));
        }
    }

    public User getUser() {
        return user;
    }

    public void setUser(User user) {
        this.user = user;
    }
}